#include <stdint.h>

//float durList[100] = {};
//int xCommandPos[100] = {};
//int yCommandPos[100] = {};
//int zCommandPos[100] = {};
float durList[100] = {1,1.04,1.08,1.12,1.16,1.2,1.25,1.3,1.35,1.4,1.45,1.51,1.56,1.62,1.68,1.75,1.82,1.88,1.96,2.03,2.11,2.19,2.27,2.36,2.45,2.54,2.63,2.73,2.84,2.95,3.06,3.17,3.29,3.42,3.55,3.68,3.82,3.97,4.12,4.28,4.44,4.61,4.78,4.96,5.15,5.35,5.55,5.76,5.98,6.21,6.44,6.69,6.94,7.21,7.48,7.76,8.06,8.36,8.68,9.01,9.35,9.71,10.08,10.46,10.86,11.27,11.7,12.14,12.6,13.08,13.58,14.09,14.63,15.18,15.76,16.36,16.98,17.62,18.29,18.99,19.71,20.45,21.23,22.04,22.87,23.74,24.64,25.58,26.55,27.56,28.6,29.69,30.82,31.99,33.2,34.46,35.77,37.13,38.54,40};
int xCommandPos[1000] = {642,755,543,838,735,819,767,588,739,433,520,346,180,773,455,565,239,636,826,349,497,809,690,500,806,325,319,371,795,252,550,626,362,682,714,526,297,385,249,572,741,846,851,805,165,553,163,882,270,286,693,170,733,707,356,774,851,774,472,563,788,545,864,621,389,698,530,817,821,587,546,589,365,651,717,645,685,98,764,555,534,336,746,667,680,265,845,140,704,233,663,640,300,777,751,284,380,330,152,922,850,819,360,596,808,240,714,608,125,713,553,605,466,374,839,746,834,117,619,770,708,677,223,428,318,883,630,777,381,438,215,211,391,639,221,645,739,316,435,536,400,380,626,742,592,570,364,789,399,772,719,759,642,671,512,158,635,735,113,442,802,804,932,401,408,843,220,763,798,428,279,484,448,669,634,864,408,767,433,603,626,574,330,816,718,319,716,394,435,269,341,772,327,682,596,738,217,782,764,735,540,742,751,491,328,769,649,756,162,688,725,747,275,653,748,600,222,797,488,320,659,588,608,920,625,103,674,661,601,437,880,473,643,959,280,638,821,760,458,688,692,346,645,864,713,761,732,403,326,664,341,605,62,488,765,250,255,302,644,722,617,569,600,627,542,799,58,686,292,601,89,742,290,837,374,177,402,543,977,895,796,614,711,817,300,434,831,377,861,1001,420,38,480,764,673,524,587,709,831,384,710,495,848,548,350,639,186,644,566,721,232,504,550,80,556,839,638,747,499,800,787,480,747,613,566,596,410,785,618,426,846,521,522,174,817,625,422,370,744,251,614,382,568,94,573,354,698,724,758,755,559,716,524,666,626,742,341,326,943,559,610,429,573,644,786,770,463,624,637,146,412,784,694,593,561,215,750,465,305,354,550,717,40,788,821,817,726,614,733,587,734,738,381,615,793,291,689,623,678,810,589,500,77,526,315,834,747,520,289,155,636,646,613,810,665,308,382,504,688,706,632,435,588,889,242,522,837,678,216,531,781,394,818,90,757,269,350,744,681,113,276,678,647,634,474,353,304,527,473,720,834,663,630,631,575,794,550,679,680,103,716,509,533,780,516,336,454,542,846,907,557,728,446,552,166,543,766,901,607,809,587,705,727,674,693,342,447,496,577,295,760,248,602,228,699,302,480,363,697,530,749,768,347,103,284,657,721,544,846,534,652,781,204,540,354,559,146,821,78,356,547,830,595,282,617,660,789,771,814,455,353,773,495,395,693,162,257,266,396,348,734,806,596,769,70,354,224,332,650,583,726,690,599,364,641,800,806,724,752,733,619,375,521,524,574,356,364,726,747,240,732,553,202,404,775,737,322,688,847,310,889,173,517,311,782,784,709,715,670,546,720,676,600,838,588,270,636,588,818,634,594,578,630,360,794,853,666,778,546,468,276,360,819,469,620,683,540,492,724,790,199,412,540,559,699,563,250,188,723,604,726,217,428,696,592,793,578,752,600,407,602,711,770,594,619,473,676,405,522,704,869,770,122,803,541,776,589,830,423,732,542,642,241,769,380,547,505,479,455,658,358,845,808,569,798,700,891,415,541,694,816,300,376,777,738,810,378,460,503,805,835,212,751,485,596,301,661,554,643,757,441,913,678,643,880,872,316,609,352,350,632,663,565,834,719,457,441,606,495,572,737,393,781,314,134,218,600,813,364,685,520,240,757,782,346,297,647,595,356,230,779,280,597,588,536,752,567,734,860,778,452,658,732,796,381,355,271,304,282,596,352,830,563,653,491,443,687,682,93,532,798,381,751,730,530,141,807,690,751,844,643,701,871,693,765,771,477,705,575,698,208,712,721,238,772,651,716,504,388,872,581,465,813,316,638,866,448,119,469,634,766,676,816,759,742,537,748,342,504,426,401,450,858,583,158,789,641,751,785,788,768,628,221,797,763,162,488,266,772,600,730,455,793,720,385,702,826,799,693,665,638,843,742,646,788,812,618,772,824,159,516,788,720,657,345,852,129,539,800,703,491,250,747,638,696,624,934,465,541,290,561,538,598,496,637,591,764,683,520,599,711,743,297,289,94,550,677,800,717,482,584,287,807,550,495,450,347,236,650,667,519,367,170,648,438,586,606,584,442,648,822,781,387,626,578,745,869,457,210,663,704,702,714,566,321,732,440,710,622,673,781,629,638,480,108,617,540,536,874,624,443,717,617,518,658,466,809,783,165,689,559,771,918,611,920,801,771,755,411,803,753,360,798,393,187,691,275,823,646,701,414,140,60,98,498,317,618,524,206,827,478,233,368,364,480,511,700,620,533,760};
int yCommandPos[1000] = {882,690,642,604,377,571,734,555,750,616,610,647,379,620,692,599,506,442,724,394,806,512,840,690,533,790,567,366,660,758,708,257,541,565,805,613,375,799,617,652,509,656,856,342,781,468,770,541,345,588,590,509,726,491,829,613,602,392,777,951,663,600,574,933,939,633,556,696,661,436,778,550,881,779,674,259,811,497,641,596,367,884,778,791,239,532,911,668,850,706,434,402,664,940,370,728,656,751,614,574,983,736,413,522,697,519,924,310,611,479,385,451,661,636,663,755,868,756,705,478,543,715,843,798,506,638,816,400,810,531,602,750,896,290,855,475,650,736,312,304,305,546,573,443,528,798,522,256,582,854,627,628,657,419,611,719,793,345,500,828,936,566,692,343,409,574,689,599,850,807,694,559,764,431,918,447,753,499,906,644,924,627,758,393,862,370,841,484,314,314,536,608,519,424,772,690,866,603,818,602,664,829,606,834,478,422,354,491,528,394,548,764,857,869,830,428,563,682,444,879,530,725,778,698,596,452,848,508,698,469,786,535,536,592,646,561,645,657,688,666,524,681,526,904,690,465,533,840,563,686,909,484,535,790,843,455,825,721,632,303,867,449,712,532,658,835,606,596,715,954,557,738,465,987,808,581,649,615,607,516,766,328,731,569,463,432,635,546,839,609,706,529,278,555,844,443,849,432,400,816,794,521,663,717,825,652,487,499,522,592,506,676,486,516,718,677,358,568,632,924,733,486,802,259,760,758,840,471,809,618,977,762,720,470,540,671,881,557,700,710,518,493,665,551,622,886,899,772,638,567,924,364,882,645,567,756,593,819,613,585,842,455,622,561,851,543,534,916,893,614,802,898,365,558,522,491,570,570,364,696,813,465,691,507,673,536,720,751,766,566,372,401,843,336,539,465,596,393,687,730,661,571,752,596,492,637,431,845,659,669,889,666,371,526,622,304,371,395,800,950,646,824,504,496,846,863,595,480,593,463,434,877,438,640,581,496,922,533,473,472,702,457,303,316,548,881,754,531,728,742,964,649,321,928,598,569,584,594,784,484,659,812,440,309,618,410,533,659,622,500,701,641,649,914,677,717,544,678,941,496,424,580,882,669,717,562,562,459,797,782,803,836,297,657,337,793,925,342,411,858,792,539,557,740,336,330,648,626,254,828,897,675,754,500,815,590,614,636,628,781,643,673,674,370,513,594,584,722,545,382,713,732,684,581,439,644,478,672,779,789,743,685,450,583,485,741,484,831,326,712,477,389,844,600,596,536,707,326,487,389,828,602,611,806,814,764,314,873,681,401,872,869,616,654,366,483,543,674,658,502,665,809,489,599,809,328,618,420,968,577,307,502,762,670,422,647,345,330,560,809,488,959,720,321,591,543,696,420,722,535,428,836,795,733,468,481,525,628,667,438,732,329,378,575,580,278,432,476,607,575,907,558,501,281,539,687,785,722,511,482,770,784,817,803,606,916,871,648,646,352,490,624,781,533,820,331,290,647,335,842,630,900,641,652,659,870,869,814,564,750,687,551,716,506,891,751,578,412,389,443,523,396,776,658,754,797,644,773,666,559,583,376,606,695,927,855,512,584,857,419,587,697,652,796,752,448,533,650,563,603,419,924,547,372,379,610,759,967,723,851,581,329,690,528,606,627,620,891,356,866,873,540,932,375,361,602,718,528,585,647,553,534,578,285,871,571,581,843,614,274,394,495,580,667,635,588,751,562,433,506,486,486,744,519,759,783,603,614,624,780,688,747,606,284,534,510,630,331,629,557,562,682,438,381,693,261,704,848,543,695,680,771,747,503,726,414,587,429,483,683,804,683,475,774,338,626,613,690,410,386,782,701,769,728,761,615,579,680,787,352,603,635,766,395,598,589,510,502,666,723,699,488,754,663,280,750,826,841,542,730,679,736,472,829,749,796,570,668,729,409,451,348,749,628,543,607,694,842,770,548,770,388,714,660,472,517,750,540,591,830,631,490,398,357,432,941,617,351,700,309,714,413,864,803,609,532,570,495,562,555,363,619,388,369,627,740,975,679,489,820,778,798,612,689,716,702,538,652,613,252,416,368,561,519,452,616,761,390,425,425,607,272,451,452,294,840,662,622,578,473,715,540,380,862,689,890,903,742,729,449,723,718,674,752,517,311,488,558,592,723,309,529,396,462,440,811,541,917,531,729,516,574,528,546,640,415,425,857,747,572,638,919,811,504,437,833,892,568,865,774,657,641,678,682,501,470,868,856,771,688,600,555,652,543,706,622,723,499,277,642};
int zCommandPos[1000] = {452,405,377,783,354,455,670,740,339,496,544,317,484,400,407,694,627,579,474,591,707,661,755,676,699,339,513,538,325,634,272,540,645,331,477,282,419,426,508,301,314,427,599,534,524,562,663,475,574,602,403,476,792,516,578,468,382,426,401,537,395,740,422,600,515,622,381,741,358,646,680,592,442,410,432,501,368,433,454,610,459,634,393,402,545,578,604,645,339,648,495,376,628,437,608,567,488,436,695,604,558,490,615,575,297,584,709,400,491,583,447,392,336,423,386,588,629,606,705,617,351,652,452,737,622,667,570,701,463,743,672,626,627,651,602,394,743,320,597,450,513,573,430,597,408,291,726,576,408,462,729,306,452,310,790,551,360,400,537,736,430,619,515,647,719,433,388,327,538,693,486,456,376,517,487,593,485,314,524,276,594,286,710,524,738,398,704,557,531,544,522,534,555,311,309,702,606,765,553,320,290,767,610,611,401,704,626,284,413,373,747,344,624,581,451,318,586,275,550,665,426,404,292,484,796,594,414,272,597,538,570,664,751,501,372,796,766,718,727,282,269,685,358,544,384,722,463,393,395,382,560,744,489,355,439,702,578,684,698,417,745,668,425,308,678,422,560,322,381,572,654,468,554,583,509,483,419,282,573,603,564,400,263,339,486,724,743,593,549,532,686,516,489,700,582,626,508,352,582,395,294,598,473,377,448,492,671,333,344,430,351,305,346,428,644,266,398,565,339,464,467,705,502,588,767,661,642,402,587,616,504,584,644,457,352,445,650,309,768,630,732,537,791,566,392,583,391,598,275,340,629,634,664,388,739,604,416,484,459,304,408,632,659,690,532,411,351,641,487,685,350,493,352,535,594,641,658,735,409,476,532,782,578,428,495,365,563,744,459,634,556,419,399,393,402,420,436,377,289,511,586,700,542,719,461,601,518,646,505,565,534,459,690,651,483,553,475,352,442,455,773,734,758,560,537,706,315,576,634,754,557,575,433,547,278,586,559,328,674,598,666,687,422,616,396,499,727,565,342,753,490,673,489,388,523,718,530,703,714,613,299,714,669,494,700,608,679,484,648,506,347,715,421,483,408,301,258,459,564,522,681,282,564,612,793,383,303,333,775,567,314,524,493,573,600,366,507,517,722,697,729,679,684,645,552,710,375,754,592,669,607,755,633,595,568,276,669,667,504,380,740,411,321,487,710,506,324,691,581,383,500,735,460,630,323,368,632,440,477,738,313,788,574,737,592,475,500,551,677,507,700,440,552,669,347,321,800,374,343,423,492,326,588,598,435,717,468,342,652,406,322,521,616,711,561,732,625,488,631,401,584,512,566,346,589,653,435,323,617,298,594,779,532,318,552,686,570,579,395,530,321,537,636,546,761,663,432,679,562,453,685,474,652,364,383,540,778,314,433,644,620,492,440,634,564,518,557,684,608,451,634,428,462,588,571,780,389,741,424,534,284,337,697,718,285,562,398,548,520,510,585,703,539,702,450,679,634,335,490,693,675,688,344,534,518,470,419,520,503,683,390,380,531,417,413,497,608,706,464,351,505,672,594,763,663,408,750,431,768,762,373,566,769,713,579,534,287,600,464,657,284,554,438,630,576,603,636,318,343,580,537,460,433,495,361,523,502,547,280,652,730,517,249,527,514,332,442,548,395,719,708,469,493,583,671,424,779,420,711,486,771,664,318,430,448,418,686,313,373,444,573,789,667,786,629,608,348,737,405,616,399,539,394,678,310,330,707,421,620,305,282,394,682,550,402,589,636,448,413,570,386,310,587,540,300,467,644,400,622,739,712,327,536,570,404,678,342,442,708,621,429,333,479,677,555,651,657,444,470,445,334,741,525,461,665,790,370,398,542,506,722,400,446,719,488,645,650,322,402,362,466,716,606,604,646,656,453,446,562,412,812,745,463,434,382,738,673,721,741,700,303,592,403,495,432,781,396,596,436,501,505,471,700,548,673,576,599,299,346,540,455,706,511,395,719,465,451,376,722,555,288,619,424,571,788,561,799,784,308,396,566,590,626,594,562,573,570,710,756,541,742,363,301,758,759,500,675,583,650,479,428,526,450,750,426,477,689,640,709,722,786,428,553,547,531,614,435,279,483,545,324,735,607,615,695,631,559,530,442,583,724,424,747,369,652,485,622,345,433,329,583,777,452,603,380,715,507,602,424,341,736,759,542,465,586,653,334,390,434,292,396,555,575,482,427,566,491,669,468,775,287,436,571,564,518,720,616,717,465,453,649,486,747,357,707,714,656,366,505,665};

const int xPushPin = 22;
const int xPullPin = 23;
const int zPushPin = 21;
const int zPullPin = 20;
const int yPushPin = 19;
const int yPullPin = 18;
const int xPotPin = A0;
const int yPotPin = A1;
const int zPotPin = A2;
float xRandDur;
long xRandIdx;
long xRandPP;
float yRandDur;
long yRandIdx;
long yRandPP;
float zRandDur;
long zRandIdx;
long zRandPP;
long randPos = random(0, 99);
int offDur = 150;
char newSer = 'c';
int numOn = 15000;
int numRep = 15;
int repCnt = 0;
int numBreak = 5000;
int brkCnt = 0;
bool xOn;
bool yOn;
bool zOn;
unsigned long tOn;
float xPos;
float yPos;
float zPos;

void setup() {  
  
  //set pin modes
  pinMode(xPushPin, OUTPUT);
  pinMode(xPullPin, OUTPUT);
  pinMode(xPotPin, INPUT);
  pinMode(yPushPin, OUTPUT);
  pinMode(yPullPin, OUTPUT);
  pinMode(yPotPin, INPUT);
  pinMode(zPushPin, OUTPUT);
  pinMode(zPullPin, OUTPUT);
  pinMode(zPotPin, INPUT);

  digitalWrite(xPullPin,LOW);
  digitalWrite(yPullPin,LOW);
  digitalWrite(zPullPin,LOW);
  digitalWrite(xPushPin,LOW);
  digitalWrite(yPushPin,LOW);
  digitalWrite(zPushPin,LOW);  

  //start serial
  Serial.begin(38400);

  delay(offDur);

  //random seed
  randomSeed(analogRead(A22));

  //wait for key to be pressed to start
  while(!Serial.available()){}
  
  //loop over onDur
  for(int i=0; i<numOn; i++){    

    if(brkCnt == numBreak){
      delay(5*60*1000);
      brkCnt = 0;
      Serial.print("break");
    }
    brkCnt = brkCnt +1;
    xPos = analogRead(xPotPin);
    yPos = analogRead(yPotPin);
    zPos = analogRead(zPotPin);
    if (repCnt == numRep) {
      randPos = random(0, 99);
      repCnt = 0;
    }
    repCnt = repCnt + 1;
    if((xPos-xCommandPos[randPos])<=0){
      xRandPP = 1;
    } else {
      xRandPP = 2;
    }
    if((yPos-yCommandPos[randPos])<=0){
      yRandPP = 1;
    } else {
      yRandPP = 2;
    }
    if((zPos-zCommandPos[randPos])<=0){
      zRandPP = 1;
    } else {
      zRandPP = 2;
    }

    if(xRandPP==1 && yRandPP==1 && zRandPP==1){
      //push all
      xRandIdx = random(0, 99);
      yRandIdx = random(0, 99);
      zRandIdx = random(0, 99);
      xRandDur = durList[xRandIdx]; 
      yRandDur = durList[yRandIdx];  
      zRandDur = durList[zRandIdx];     
      digitalWrite(xPushPin,HIGH);
      digitalWrite(yPushPin,HIGH);
      digitalWrite(zPushPin,HIGH);
      tOn = micros();
      xOn = 1;
      yOn = 1;
      zOn = 1;
      while(xOn || yOn || zOn){
        if(xOn && (micros()-tOn)>=xRandDur*1000){
          digitalWrite(xPushPin,LOW);
          xOn = 0;
        }
        if(yOn && (micros()-tOn)>=yRandDur*1000){
          digitalWrite(yPushPin,LOW);
          yOn = 0;
        }
        if(zOn && (micros()-tOn)>=zRandDur*1000){
          digitalWrite(zPushPin,LOW);
          zOn = 0;
        }
      }
      delay(offDur);
    }    
    else if(xRandPP==1 && yRandPP==2 && zRandPP==1){   
      //push x pull y push z
      xRandIdx = random(0, 99);
      yRandIdx = random(0, 99);
      zRandIdx = random(0, 99);
      xRandDur = durList[xRandIdx]; 
      yRandDur = durList[yRandIdx]; 
      zRandDur = durList[zRandIdx]; 
      digitalWrite(xPushPin,HIGH);
      digitalWrite(yPullPin,HIGH);
      digitalWrite(zPushPin,HIGH);
      tOn = micros();
      xOn = 1;
      yOn = 1;
      zOn = 1;
      while(xOn || yOn || zOn){
        if(xOn && (micros()-tOn)>=xRandDur*1000){
          digitalWrite(xPushPin,LOW);
          xOn = 0;
        }
        if(yOn && (micros()-tOn)>=yRandDur*1000){
          digitalWrite(yPullPin,LOW);
          yOn = 0;
        }
        if(zOn && (micros()-tOn)>=zRandDur*1000){
          digitalWrite(zPushPin,LOW);
          zOn = 0;
        }
      }
      delay(offDur);      
    }
    else if(xRandPP==1 && yRandPP==1 && zRandPP==2){   
      //push x push y pull z
      xRandIdx = random(0, 99);
      yRandIdx = random(0, 99);
      zRandIdx = random(0, 99);
      xRandDur = durList[xRandIdx]; 
      yRandDur = durList[yRandIdx]; 
      zRandDur = durList[zRandIdx]; 
      digitalWrite(xPushPin,HIGH);
      digitalWrite(yPushPin,HIGH);
      digitalWrite(zPullPin,HIGH);
      tOn = micros();
      xOn = 1;
      yOn = 1;
      zOn = 1;
      while(xOn || yOn || zOn){
        if(xOn && (micros()-tOn)>=xRandDur*1000){
          digitalWrite(xPushPin,LOW);
          xOn = 0;
        }
        if(yOn && (micros()-tOn)>=yRandDur*1000){
          digitalWrite(yPushPin,LOW);
          yOn = 0;
        }
        if(zOn && (micros()-tOn)>=zRandDur*1000){
          digitalWrite(zPullPin,LOW);
          zOn = 0;
        }
      }
      delay(offDur);      
    }
    else if(xRandPP==2 && yRandPP==1 && zRandPP==1){
      //pull x push y push z
      xRandIdx = random(0, 99);
      yRandIdx = random(0, 99);
      zRandIdx = random(0, 99);
      xRandDur = durList[xRandIdx]; 
      yRandDur = durList[yRandIdx]; 
      zRandDur = durList[zRandIdx]; 
      digitalWrite(xPullPin,HIGH);
      digitalWrite(yPushPin,HIGH);
      digitalWrite(zPushPin,HIGH);
      tOn = micros();
      xOn = 1;
      yOn = 1;
      zOn = 1;
      while(xOn || yOn || zOn){
        if(xOn && (micros()-tOn)>=xRandDur*1000){
          digitalWrite(xPullPin,LOW);
          xOn = 0;
        }
        if(yOn && (micros()-tOn)>=yRandDur*1000){
          digitalWrite(yPushPin,LOW);
          yOn = 0;
        }
        if(zOn && (micros()-tOn)>=zRandDur*1000){
          digitalWrite(zPushPin,LOW);
          zOn = 0;
        }
      }
      delay(offDur);      
    }
    else if(xRandPP==2 && yRandPP==2 && zRandPP==1){
      //pull x pull y push z
      xRandIdx = random(0, 99);
      yRandIdx = random(0, 99);
      zRandIdx = random(0, 99);
      xRandDur = durList[xRandIdx]; 
      yRandDur = durList[yRandIdx]; 
      zRandDur = durList[zRandIdx]; 
      digitalWrite(xPullPin,HIGH);
      digitalWrite(yPullPin,HIGH);
      digitalWrite(zPushPin,HIGH);
      tOn = micros();
      xOn = 1;
      yOn = 1;
      zOn = 1;
      while(xOn || yOn || zOn){
        if(xOn && (micros()-tOn)>=xRandDur*1000){
          digitalWrite(xPullPin,LOW);
          xOn = 0;
        }
        if(yOn && (micros()-tOn)>=yRandDur*1000){
          digitalWrite(yPullPin,LOW);
          yOn = 0;
        }
        if(zOn && (micros()-tOn)>=zRandDur*1000){
          digitalWrite(zPushPin,LOW);
          zOn = 0;
        }
      }
      delay(offDur);      
    }
    else if(xRandPP==2 && yRandPP==1 && zRandPP==2){
      //pull x push y pull z
      xRandIdx = random(0, 99);
      yRandIdx = random(0, 99);
      zRandIdx = random(0, 99);
      xRandDur = durList[xRandIdx]; 
      yRandDur = durList[yRandIdx]; 
      zRandDur = durList[zRandIdx]; 
      digitalWrite(xPullPin,HIGH);
      digitalWrite(yPushPin,HIGH);
      digitalWrite(zPullPin,HIGH);
      tOn = micros();
      xOn = 1;
      yOn = 1;
      zOn = 1;
      while(xOn || yOn || zOn){
        if(xOn && (micros()-tOn)>=xRandDur*1000){
          digitalWrite(xPullPin,LOW);
          xOn = 0;
        }
        if(yOn && (micros()-tOn)>=yRandDur*1000){
          digitalWrite(yPushPin,LOW);
          yOn = 0;
        }
        if(zOn && (micros()-tOn)>=zRandDur*1000){
          digitalWrite(zPullPin,LOW);
          zOn = 0;
        }
      }
      delay(offDur);      
    }
    else {
      //pull all
      xRandIdx = random(0, 99);
      yRandIdx = random(0, 99);
      zRandIdx = random(0, 99);
      xRandDur = durList[xRandIdx]; 
      yRandDur = durList[yRandIdx]; 
      zRandDur = durList[zRandIdx]; 
      digitalWrite(xPullPin,HIGH);
      digitalWrite(yPullPin,HIGH);
      digitalWrite(zPullPin,HIGH);
      tOn = micros();
      xOn = 1;
      yOn = 1;
      zOn = 1;
      while(xOn || yOn || zOn){
        if(xOn && (micros()-tOn)>=xRandDur*1000){
          digitalWrite(xPullPin,LOW);
          xOn = 0;
        }
        if(yOn && (micros()-tOn)>=yRandDur*1000){
          digitalWrite(yPullPin,LOW);
          yOn = 0;
        }
        if(zOn && (micros()-tOn)>=zRandDur*1000){
          digitalWrite(zPullPin,LOW);
          zOn = 0;
        }
      }
      delay(offDur);
    }    
  }
  Serial.print("done");
}

void loop() {
  
}
