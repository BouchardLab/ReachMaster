"""SpikeGadgets provides this script to import data from Trodes
to Python. For further documentation, visit `SpikeGadgets 
<http://spikegadgets.com/software/python_toolbox.html>`_ . 

"""

#!/usr/bin/python
#Requires numpy to be installed. re and sys are defaults for python
#assumes python 2.7
import numpy as np
import re
from sys import argv
# Main function
def readTrodesExtractedDataFile(filename):
    """Read a DIO or analog Trodes .dat file. These files are 
    typically produced after converting the raw .rec files 
    using the `exportdio` or `exportanalog` bash scripts 
    provided by SpikeGadgets. Visit `SpikeGadgets 
    <http://spikegadgets.com/software/python_toolbox.html>`_ for 
    more details. 

    Parameters
    ----------
    filename : str
        Path to file

    Returns
    -------
    fieldText : dict  
        A nested dictionary with the extracted data      

    """ 
    with open(filename, 'rb') as f:
        # Check if first line is start of settings block
        if f.readline().decode('ascii').strip() != '<Start settings>':
            raise Exception("Settings format not supported")
        fields = True
        fieldsText = {}
        for line in f:
            # Read through block of settings
            if(fields):
                line = line.decode('ascii').strip()
                # filling in fields dict
                if line != '<End settings>':
                    vals = line.split(': ')
                    fieldsText.update({vals[0].lower(): vals[1]})
                # End of settings block, signal end of fields
                else:
                    fields = False
                    dt = parseFields(fieldsText['fields'])
                    fieldsText['data'] = np.zeros([1], dtype = dt)
                    break
        # Reads rest of file at once, using dtype format generated by parseFields()
        dt = parseFields(fieldsText['fields'])
        data = np.fromfile(f, dt)
        fieldsText.update({'data': data})
        return fieldsText


# Parses last fields parameter (<time uint32><...>) as a single string
# Assumes it is formatted as <name number * type> or <name type>
# Returns: np.dtype
def parseFields(fieldstr):
    # Returns np.dtype from field string
    sep = re.split('\s', re.sub(r"\>\<|\>|\<", ' ', fieldstr).strip())
    # print(sep)
    typearr = []
    # Every two elmts is fieldname followed by datatype
    for i in range(0,sep.__len__(), 2):
        fieldname = sep[i]
        repeats = 1
        ftype = 'uint32'
        # Finds if a <num>* is included in datatype
        if sep[i+1].__contains__('*'):
            temptypes = re.split('\*', sep[i+1])
            # Results in the correct assignment, whether str is num*dtype or dtype*num
            ftype = temptypes[temptypes[0].isdigit()]
            repeats = int(temptypes[temptypes[1].isdigit()])
        else:
            ftype = sep[i+1]
        try:
            fieldtype = getattr(np, ftype)
        except AttributeError:
            print(ftype + " is not a valid field type.\n")
            exit(1)
        else:
            typearr.append((str(fieldname), fieldtype, repeats))
    return np.dtype(typearr)



# Testing function here---------------------
# fields = readTrodesExtractedDataFile('16ChannelRec.spikes_nt10.dat')
# print(fields['data'])

# if argv.__len__() > 1:
#     np.set_printoptions(threshold='nan')
#     fields = readTrodesExtractedDataFile(argv[1])
#     print(fields['data'])

